service: bus-backend-app

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage}
  region: ap-southeast-1
  # vpc:
  #   subnetIds: ${self:custom.subnetPrivateId.${opt:stage}}
  #   securityGroupIds: ${self:custom.securityGroupId.${opt:stage}}
  apiGateway:
    shouldStartNameWithService: true

functions:
  # update_cache:
  #   handler: update_cache.hello
  #   memorySize: 128
  #   events:
  #     - schedule: 
  #         name: fetch-latest-LTA-data-${self:provider.stage}
  #         description: fetch and update cache
  #         rate: rate(1 minute)
  #         enabled: true
  get_buses:
    handler: buses.get
    memorySize: 128
    events:
      - http:
          path: buses
          method: get
  get_busstops:
    handler: busstops.get
    memorySize: 128
    events:
      - http:
          path: bus-stops
          method: get
  get_arrival:
    handler: arrival.get
    memorySize: 128
    events:
      - http:
          path: arrival/{id}
          method: get
          request:
            parameters:
              paths:
                id: true

plugins:
  - serverless-domain-manager
  - serverless-offline-scheduler
  - serverless-offline
  - serverless-python-requirements
custom:
  domain:
    dev: dev.sgbus.tk
    staging: staging.sgbus.tk
    prod: www.sgbus.tk
  vpcId:
    dev: ${ssm:/bus-backend-infra/dev/vpc/id}
    staging: ${ssm:/bus-backend-infra/staging/vpc/id}
    prod: ${ssm:/bus-backend-infra/prod/vpc/id}
  subnetPublicId:
    dev: ${ssm:/bus-backend-infra/dev/subnet/public/id~split}
    staging: ${ssm:/bus-backend-infra/staging/subnet/public/id~split}
    prod: ${ssm:/bus-backend-infra/prod/subnet/public/id~split}
  subnetPrivateId:
    dev: ${ssm:/bus-backend-infra/dev/subnet/private/id~split}
    staging: ${ssm:/bus-backend-infra/staging/subnet/private/id~split}
    prod: ${ssm:/bus-backend-infra/prod/subnet/private/id~split}
  securityGroupId:
    dev: ${ssm:/bus-backend-infra/dev/securityGroup/id}
    staging: ${ssm:/bus-backend-infra/staging/securityGroup/id}
    prod: ${ssm:/bus-backend-infra/prod/securityGroup/id}
  customDomain:
    domainName: ${self:custom.domain.${opt:stage}}
    basePath: 'api'
    stage: ${opt:stage}
    createRoute53Record: true

# you can overwrite defaults here
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
